dependency = 의존관계
스프링은 다형성을 극대화, 제어의 역전(IoC), 의존관계 주입(DI)
다형성
역할과 구현을 분리

자바의 다형성 구현방식 
인터페이스, 오버라이딩 활용

다형성의 본질
클라이언트를 변경하지않고 서버의 구현 기능을 유연하게 변경, 확장 가능

한계
역할(인터페이스)자체가 변경해야할경우 클라이언트, 서버 모두에 큰 변경이 발생
== 인터페이스 설계 중요해짐

스프링에서 객체지향이 나오는 이유
스프링은 다형성을 극대화해주지만
다형성 만으로는 OCP, DIP 지키기가 힘들다
그래서 추가되는 기능들 DI, DI컨테이너

정리 
-모든 설계에 역할과 구현 분리
- 언제든지 유연하게 변경할 수 있도록 만들기
- 모든 설계에 인터페이스를 부여해서 관리하도록 노력





객체지향 설계 5가지 원칙 
SOLID (SRP, OCP, LSP, ISP, DIP)
SRP(Single responsibility principle) - 단일 책임 원칙
-하나의 클래스 = 하나의 책임
-(중요)변경이 있을때 파급효과가 적게 만들려 노력
문제점
-하나의 책임 == 그때그때 문맥과 상황에 따라 다름 == 기준이 모호함

OCP(Open/closed principle) - 개방-폐쇄 원칙
-확장에는 열림, 변경에는 닫힘
-다형성(상속, 인터페이스)을 활용하여 구현 하도록 노력
대부분 다형성을 적용하려하면 OCP원칙을 깨지게된다 그래서 부가적으로 스프링에서 기능을 지원해준다
문제점
-구현 객체를 변경하려면 클라이언트 코드를 변경해야한다
-객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요

LSP(Liskov substtution principle) - 리스코프 치환 원칙
- 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 인스턴스로 바꿀수있어야한다
- 결과가 기능적으로 해당 기능(성능 정도 상관없이 어떻게든)을 수행하게 해야한다

ISP(Interface segregation principle) 인터페이스 분리 원칙
- 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다
- 역할을 분리하여 명확하게 하고 대체가능성을 높인다

DIP(Dependency inversion principle) - 의존관계 역전 원칙
- 프로그래머는 추상화에 의존해야한다
- 역할에 의존하게 해야한다. (인터페이스 중심의 개발을 노력)
예시로 나온 MemberRepository m = new MemoryMemberRepository()  == DIP 위반이다
why? 인터페이스 객체가 변경하기위해 코드를 알아야해서

다형성 만으로는 OCP, DIP 지킬수가 없다




AFAJNxkd-WX7oyyOA
U90U870k-M7sHcRPh
2xaZJG8R-2d6TPxWN
6qm1uAm3-UjSU4zqG
4MlP8fTI-DeuBcZY2
uq5MWQuT-Ye1IqPiG
H1YhRmvS-sDH0TUIR
AavVg5fr-SmOEEEgb
72ssIR6H-56cz4Dwn
SauMtLX5-FqrwQW1G




